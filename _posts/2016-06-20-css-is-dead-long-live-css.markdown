---
layout: post
title:  "CSS is dead - Long live (post)CSS"
description: "Make CSS great again!"
date:   2016-06-25 06:17:58 -0300
categories: blog
---

Sejamos sinceros, "escrever" CSS Ã© fÃ¡cil se compararmos o quÃ£o difÃ­cil Ã© manter e escalar o mesmo em um projeto grande, mas felizmente temos muitas opÃ§Ãµes para tornar estas tarefas pelo menos mais fÃ¡ceis.

**Antes de prosseguir com o post, por determinaÃ§Ã£o da W3C devemos sempre postar o gif abaixo quando o papo Ã© CSS.**

![CSS...](/img/css.gif)

Bom, como eu ia dizendo, hoje temos vÃ¡rias opÃ§Ãµes para nos facilitar a vida, infelizmente o tempo vem nos provando que nenhuma delas Ã© adequada e na verdade, cabe a vocÃª e sua equipe decidirem qual Ã© a que melhor atende as vossas necessidades.

Recentemente abandonei os prÃ©-processadores e migrei para o [PostCSS](http://postcss.org/), uma ferramenta que por padrÃ£o Ã© muito Ãºtil e que nÃ£o faz "nada"...

Antes de falarmos sobre PostCSS, vamos rever algumas soluÃ§Ãµes e metodologias que foram surgindo ao longo dos Ãºltimos anos e que foi moldando como escrevemos CSS atualmente.

![Oh boy...](/img/oh-boy.gif)

## Metodologias

Seja ela [SUIT CSS](https://suitcss.github.io/), [BEM](https://en.bem.info/), [OOCSS](http://oocss.org/), [SMACSS](https://smacss.com/), [...] entre tantas outras, todas elas possuem pontos positivos e negativos, e como falei acima, cabe a vocÃª decidir.

De uma maneira geral, todas cumprem o que prometem, se fosse para escolher uma eu optaria pelo SUIT CSS que tem nas suas raÃ­zes o BEM.

## PrÃ©-processadores

Resumindo os prÃ©-processadores CSS: Syntax sugar e template language. Os prÃ©-processadores tornaram a tarefa de escrever CSS muito mais fÃ¡cil e ainda adicinou alguns "poderes" como loops de repetiÃ§Ã£o, mixins, funÃ§Ãµes e mais um monte de coisas que raramente as pessoas usam para valer em projetos, mas que deveriam.

## PostCSS

Ok, ao ponto principal do artigo, PostCSS.

PostCSS nada mais Ã© do que uma ferramenta que nos permite transformar CSS usando JS. Simples e direto. Conforme relatei acima, PostCSS por padrÃ£o Ã© muito Ãºtil, porÃ©m nÃ£o faz nada, pois o responsÃ¡vel pela transformaÃ§Ã£o sÃ£o os plugins e, como vocÃª pode imaginar, [temos muitos plugins para os mais variados tipos de tarefas](http://postcss.parts/), existe atÃ© [plugin para resolver problemas com plugins](https://github.com/postcss/postcss-use). ðŸ¤”

Basicamente uma chamada PostCSS Ã© composta pelo Parser e pelo CSS Stringifier, conforme imagem abaixo:

![Inside PostCSS](/img/inside-postcss.png)

Em outras palavras, o Parser recebe uma string de CSS e transforma esta string em uma AST (Abstract Syntax Tree), enquanto que o CSS Stringifier faz justamente o contrÃ¡rio, ele transforma a AST (jÃ¡ modificada pelos plugins) em uma string CSS. Simples assim.

PorÃ©m como quase tudo nesta vida Ã© mutÃ¡vel,

Dito isto, este post perde o sentido, ora, se nÃ£o existe bala de prata, por qual motivo devo continuar lendo se nenhuma soluÃ§Ã£o Ã© perfeita, nÃ£o Ã© mesmo? NÃ£o, nÃ£o Ã© mesmo! NÃ£o

CSS, um dos pilares da web, quem nunca teve algum problema com ele que atire a primeira pedra. Este ano o CSS completa 20 anos, (17 de Dezembro), e para comemorar (ou nÃ£o) escrevo este post onde relato minha breve experiÃªncia com o mesmo.

NÃ£o sou nenhum dinossauro neste mundo de web, comecei brincando com blogspot em 2009, minha ideia era fazer um blog pois todo mundo tinha um blog e era "cool", anyway, o objetivo deste post (como jÃ¡ falei no paragrÃ¡fo anterior) Ã© outro, entÃ£o, voltando ao assunto.

### CSS.

Ok, na Ã©poca que comecei a brincar com web o CSS jÃ¡ estava um pouco mais estabilizado, (in)felizmente nÃ£o peguei a Ã©poca onde as tabelas comandavam os layouts, entre outras coisas...

### Less

Meu primeiro contato com Less foi atravÃ©s do blog [Loop Infinito](http://loopinfinito.com.br/). Lembro que fuÃ§ando o site encontrei um projeto de traduÃ§Ã£o do site do Less.

> ...

### Sass

Minha mudanÃ§a para o lado Sass da forÃ§a ocorreu por conta de 2 fatores: Compass e Rails.
Percebi que estavam falando muito do tal do Compass e entÃ£o descobri que era um framework para o Sass. Como estava num processo de transiÃ§Ã£o do PHP para o Rails, acabei descobrindo todo o poder do Sass. EngraÃ§ado que muito se fala (e critica) hoje sobre escrever CSS no JS, mas vale lembrar que jÃ¡ escrevemos muito CSS no Ruby!

> Codekit
> Grunt

### PrÃ©-conceito com o Stylus

Nunca gostei muito do Stylus, principalmente pela liberdade excessiva (?).

### Adeus prÃ©-processadores

Hoje, com raras exceÃ§Ãµes, nÃ£o uso mais prÃ©-processedores. Os motivos sÃ£o claros:

* Apenas syntax-sugar
* NÃ£o resolvem problemas mais importantes, tais qual escalabilidade

### PostCSS
> <3
> String

### CSS Modules
> <3
Sass/Stylus/Less ajudam a escrever CSS mais facilmente
CSS Modules ajuda escrever CSS escalÃ¡vel

### CSS4? NÃ£o!
> <3

### Futuro!
> Far beyond...
> https://drafts.csswg.org/cssom/
> Make CSS great again

```css
ul {
  --itemColor: #08C;
}

ol {
  --itemColor: #655;
}

/* Adivinha o que acontece?! */
li {
  color: var(--itemColor);
}
```
