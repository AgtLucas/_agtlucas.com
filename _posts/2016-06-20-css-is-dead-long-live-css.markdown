---
layout: post
title:  "CSS is dead - Long live (post)CSS"
description: "Make CSS great again!"
date:   2016-06-25 06:17:58 -0300
categories: blog
---

Sejamos sinceros, "escrever" CSS √© f√°cil se compararmos o qu√£o dif√≠cil √© manter e escalar o mesmo, mas felizmente temos muitas op√ß√µes para tornar estas tarefas um pouco mais f√°ceis.

> O objetivo deste post √© resumir de forma bem resumida o que √© PostCSS.

**Antes de prosseguir com o post, por determina√ß√£o da W3C devemos sempre postar o gif abaixo quando o papo √© CSS.**

![CSS...](/img/css.gif)

Bom, como eu ia dizendo, hoje temos v√°rias op√ß√µes para nos facilitar a vida, infelizmente o tempo vem nos provando que nenhuma delas √© adequada e na verdade, cabe a voc√™ e sua equipe decidirem qual √© a que melhor atende as vossas necessidades.

Recentemente abandonei os pr√©-processadores e migrei para o [PostCSS](http://postcss.org/), uma ferramenta que por padr√£o √© muito √∫til e que n√£o faz "nada"...

Antes de falarmos sobre PostCSS, vamos rever algumas solu√ß√µes e metodologias que foram surgindo ao longo dos √∫ltimos anos e que foi moldando como escrevemos CSS atualmente.

![Oh boy...](/img/oh-boy.gif)

## Metodologias

Seja ela [SUIT CSS](https://suitcss.github.io/), [BEM](https://en.bem.info/), [OOCSS](http://oocss.org/), [SMACSS](https://smacss.com/), [...] entre tantas outras, todas elas possuem pontos positivos e negativos, e como falei acima, cabe a voc√™ decidir.

De uma maneira geral, todas cumprem o que prometem, se fosse para escolher uma eu optaria pelo SUIT CSS que tem nas suas ra√≠zes o BEM.

## Pr√©-processadores

Resumindo os pr√©-processadores CSS: Syntax sugar e template language. Os pr√©-processadores tornaram a tarefa de escrever CSS muito mais f√°cil e ainda adicinou alguns "poderes" como loops, mixins, fun√ß√µes e mais um monte de coisas que raramente as pessoas usam para valer em projetos, mas que deveriam.

## PostCSS

Ok, ao ponto principal do post, PostCSS.

![Inside PostCSS](/img/go-on.gif)

> **PostCSS nada mais √© do que uma ferramenta que nos permite transformar CSS usando JS.**

Conforme relatei acima, PostCSS por padr√£o √© muito √∫til, por√©m n√£o faz nada, pois o respons√°vel pela transforma√ß√£o s√£o os plugins e, como voc√™ pode imaginar, [temos muitos plugins para os mais variados tipos de tarefas](http://postcss.parts/), existe at√© [plugin para resolver problemas com plugins](https://github.com/postcss/postcss-use). ü§î

Basicamente uma chamada PostCSS √© composta pelo Parser e pelo CSS Stringifier, conforme imagem abaixo:

![Inside PostCSS](/img/inside-postcss.png)

Em outras palavras, o Parser recebe uma string de CSS e transforma esta string em uma AST (Abstract Syntax Tree), enquanto que o CSS Stringifier faz justamente o contr√°rio, ele transforma a AST (j√° modificada pelos plugins) em uma string CSS.

Deu pra perceber o qu√£o poderoso isto √©? Podemos fazer basicamente qualquer coisa com o CSS manipulando-o usando JS.

Mesmo com todo este poder, PostCSS √© r√°pido, muito r√°pido! Veja o benchmark abaixo:

```css
/* Results on node 5.0.0, Fedora 22, Intel 5Y70, 8 GB RAM and SSD::
PostCSS:   40 ms
Rework:    75 ms   (1.9 times slower)
libsass:   76 ms   (1.9 times slower)
Less:      147 ms  (3.7 times slower)
Stylus:    166 ms  (4.1 times slower)
Stylecow:  258 ms  (6.4 times slower)
Ruby Sass: 1042 ms (26.0 times slower)
*/
```

Entretando, podemos notar que com exce√ß√£o da vers√£o em Ruby do compilador do Sass, todas as demais s√£o r√°pidas o suficiente. O benchmark completo pode ser visto [aqui](https://github.com/postcss/benchmark).

Como este post √© apenas um breve resumo, n√£o vou entrar em detalhes de configura√ß√µes, isto fica para o pr√≥ximo post que ser√° sobre **CSS Modules e ReactJS**, mas apenas adiantando um pouco o assunto...

## cssnext

> N√£o, n√£o teremos CSS4 (assim como n√£o temos CSS3, e sim CSS com seletores level 3).

cssnext nos permite usar novas features do CSS (ex.: vari√°veis) hoje, ou seja, √© como o Babel, s√≥ que "do css..."

Considere:

```css
ul {
  --itemColor: #08C;
}

ol {
  --itemColor: #655;
}

/* Adivinha o que acontece?! */
li {
  color: var(--itemColor);
}
```

No exemplo acima, declaramos uma vari√°vel nativa do CSS e atribu√≠mos 2 valores diferentes em 2 escopos diferentes; `ul` e `ol`. Todo `li` que estiver no escopo do `ul` ter√° uma cor azul e aqueles que estiverem no escopo do `ol` ter√£o uma cor marrom. Bacana, n√£o?

Apesar da sintaxe feia, vari√°veis nativas no CSS v√£o muito al√©m do que atribui√ß√£o de valores, se quiser saber mais recomendo ler [este post escrito pela Di√©ssica](https://diessi.ca/blog/a-cascata-das-variaveis-do-css/).

Demais features do cssnext => [http://cssnext.io/features/](http://cssnext.io/features/).

![Not bad](/img/not-bad.gif)

## CSS Modules

CSS Modules surgiu da necessidade de algum mecanismo de escopo no CSS.

> [Existe um draft sobre escopo nativo, por√©m ainda n√£o passa de draft](https://www.w3.org/TR/css-scoping-1/).

Com CSS Modules, tudo tem seu pr√≥prio escopo, ou seja local, dito isto n√£o precisamos nos preocupar com nomes & prefixos de classes & conflitos.

Considere os seguintes componente **Foo**:

```js
// Foo.js
import React, { Component } from 'react'
import styles from './foo.css'

class Foo extends Component {
  render () {
    return (
      <div className={styles.title}>Foo</div>
    )
  }
}
```

```css
/* Foo.css */
.title {
  color: #666;
}
```

Mesmo usando uma classe com nome t√£o comum como `title` n√£o terei problemas de conflitos pois quando compilado, meu componente vai ter uma classe "escopada" com uma hash, algo do tipo:

```html
<div class="_6kldcs">Foo</div>
```

![Not bad](/img/clap-kim.gif)

E caso eu tivesse um componente **Bar** com a mesma estrutura e mesmo nome de classe, a hash seria diferente.

No pr√≥ximo post explicarei em detalhes como funciona o escopo local e global no CSS Modules.

### Continua no pr√≥ximo epis√≥dio.
