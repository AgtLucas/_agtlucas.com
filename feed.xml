<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lucas da Silva - Front-End Developer</title>
    <description>Front-End Developer
</description>
    <link>https://lucas.ninja/</link>
    <atom:link href="https://lucas.ninja/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 31 Dec 2017 10:45:07 -0200</pubDate>
    <lastBuildDate>Sun, 31 Dec 2017 10:45:07 -0200</lastBuildDate>
    <generator>Jekyll v3.6.2</generator>
    
      <item>
        <title>Destructuring with default value</title>
        <description>&lt;p&gt;If you’re familiar with ES6/ES2015, you probably have heard about &lt;code class=&quot;highlighter-rouge&quot;&gt;Destructuring&lt;/code&gt;, right? Me too, but there’s one thing I wasn’t aware of. Destructuring with default value!&lt;/p&gt;

&lt;h2 id=&quot;destructuring&quot;&gt;Destructuring&lt;/h2&gt;

&lt;p&gt;From the awesome &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment&quot;&gt;MDN&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The destructuring assignment syntax is a JavaScript expression that makes it possible to extract data from arrays or objects into distinct variables.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The basic idea is that you can easily get any specific property from an object, so instead of doing this:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;456&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;baz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'other'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 123&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 456&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can pull all the properties you’d desire like so:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;456&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;baz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'other'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 123&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 456&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;default-value&quot;&gt;Default value&lt;/h2&gt;

&lt;p&gt;But what if the property we would like is undefined, or if is not defined at all? 🤔&lt;/p&gt;

&lt;p&gt;As you can see bellow, we’d get an &lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt; if we tried to access that property.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;456&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;baz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'other'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// or&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// const obj = { foo: undefined, bar: 456, baz: 000, other: 'other' }&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// or&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// const obj = { foo, bar: 456, baz: 000, other: 'other' }&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// undefined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For sure you can use a condition to verify if the property has a value or if it exists, but we can do better, we can define a &lt;strong&gt;default value&lt;/strong&gt;!&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;456&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;baz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'other'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// or&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// const obj = { foo: undefined, bar: 456, baz: 000, other: 'other' }&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// or&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// const obj = { foo, bar: 456, baz: 000, other: 'other' }&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'My default value'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 'My default value'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And we can use for arrays too…&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Default value'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 'Default value'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That’s it! I just wanted to share this little thing that I’ve learned today. And you, what have you learned today?&lt;/p&gt;
</description>
        <pubDate>Sun, 23 Apr 2017 10:00:00 -0300</pubDate>
        <link>https://lucas.ninja/blog/2017/04/23/destructuring-with-default-value/</link>
        <guid isPermaLink="true">https://lucas.ninja/blog/2017/04/23/destructuring-with-default-value/</guid>
        
        <category>js</category>
        
        <category>es6</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>On pursuit of productivity</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;Don’t care too much about productivity tools, care about yourself!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;the-problem&quot;&gt;The problem&lt;/h2&gt;

&lt;p&gt;Ok, I confess, a few years ago, I had serious issues to keep a productive routine, the procrastination was my archenemy, the lack of discipline, I mean, my life was messy, it was a crazy, old and stupid roller coaster. You see, I’m not productive as I wished to be, but now I’m able to complete my imaginary TODO list.&lt;/p&gt;

&lt;p&gt;Being productive requires behavioral changes and a lot of discipline! The problem is, bad habits take so much time to be overcome and replaced with good and healthy habits, and these good habits take even much more time to become habits in fact.&lt;/p&gt;

&lt;h2 id=&quot;solutions&quot;&gt;Solutions?&lt;/h2&gt;

&lt;p&gt;There are tons of techniques, methodologies, and tools to help us become more productive, and, while I’m not an unbeliever that they can make a difference, I sometimes have the feeling that this kind of approach is not good in long term, I see them only as a medicine for some disease.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;There’s a book on this topic called &lt;a href=&quot;https://www.amazon.com/Marshmallow-Test-Self-Control-Engine-Success/dp/0316230863/&quot;&gt;The Marshmallow Test: Why Self-Control Is the Engine of Success&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I’ve tried Pomodoro, I’ve tried GTD, heck, I spent so many hours testing tools to help me be more productive… I was so naive.&lt;/p&gt;

&lt;h2 id=&quot;so-what&quot;&gt;So what?&lt;/h2&gt;

&lt;p&gt;I believe that before adopting any approach or methodology to increase productivity, we should pay more attention to ourselves. If I don’t know what I want, I will probably not be a productive person, because I will probably be in an eternal loop wandering the internet trying to find out what to do.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So here are the two most important things that I’ve learned until now in this long journey to productivity:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Tools are not that important.&lt;/li&gt;
  &lt;li&gt;Know yourself.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the end of the day, it doesn’t matter what tool or methodology you use, sure tools and methodologies can help us, but if you don’t have discipline/self-control, none of this really matter, none of this will work.&lt;/p&gt;
</description>
        <pubDate>Sun, 16 Apr 2017 10:00:00 -0300</pubDate>
        <link>https://lucas.ninja/blog/2017/04/16/on-pursuit-of-productivity/</link>
        <guid isPermaLink="true">https://lucas.ninja/blog/2017/04/16/on-pursuit-of-productivity/</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>CSS - The initial value</title>
        <description>&lt;p&gt;Every once and awhile, you’re reading the CSS spec and then you encounter some not so known features or other interesting things, right? Have you heard about &lt;code class=&quot;highlighter-rouge&quot;&gt;initial&lt;/code&gt; value?&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;initial&lt;/code&gt; value, as the name implies, &lt;strong&gt;represents the value specified as the property’s initial value.&lt;/strong&gt; It’s important to note that it doesn’t mean the browser default value for given property!&lt;/p&gt;

&lt;h2 id=&quot;quick-example&quot;&gt;Quick example&lt;/h2&gt;

&lt;p&gt;Let’s say we have an anchor tag with some fancy color, like this:&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#08C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If, by whatever crazy reason I need to reset the color value to its initial value, which in this case will be &lt;code class=&quot;highlighter-rouge&quot;&gt;#000&lt;/code&gt;, I can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;initial&lt;/code&gt; keyword, like so:&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* = color: #000; */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That’s cool, but what if instead I want to reset all CSS properties for given element to its initial value, how can I do that? Well, there’s a shorthand property called &lt;code class=&quot;highlighter-rouge&quot;&gt;all&lt;/code&gt; that does exactly that (except for &lt;code class=&quot;highlighter-rouge&quot;&gt;direction&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;unicode-bidi&lt;/code&gt;)!&lt;/p&gt;

&lt;p&gt;So if I want to reset all the anchor’s properties value, I can simply do this:&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And that’s it!&lt;/p&gt;

&lt;p&gt;Check out Can I Use page for more information about browser support for &lt;a href=&quot;http://caniuse.com/#feat=css-initial-value&quot;&gt;initial value&lt;/a&gt; and &lt;a href=&quot;http://caniuse.com/#search=all&quot;&gt;all property&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Thu, 19 Jan 2017 11:00:00 -0200</pubDate>
        <link>https://lucas.ninja/blog/2017/01/19/the-initial-value/</link>
        <guid isPermaLink="true">https://lucas.ninja/blog/2017/01/19/the-initial-value/</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>CSS is dead - Long live (post)CSS</title>
        <description>&lt;p&gt;Sejamos sinceros, “escrever” CSS é fácil se compararmos o quão difícil é manter e escalar o mesmo, mas felizmente temos muitas opções para tornar estas tarefas um pouco mais fáceis.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;O objetivo deste post é resumir de forma bem resumida o que é PostCSS.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Antes de prosseguir com o post, por determinação da W3C devemos sempre postar o gif abaixo quando o papo é CSS.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/css.gif&quot; alt=&quot;CSS...&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Bom, como eu ia dizendo, hoje temos várias opções para nos facilitar a vida, infelizmente o tempo vem nos provando que nenhuma delas é adequada e na verdade, cabe a você e sua equipe decidirem qual é a que melhor atende as vossas necessidades.&lt;/p&gt;

&lt;p&gt;Recentemente abandonei os pré-processadores e migrei para o &lt;a href=&quot;http://postcss.org/&quot;&gt;PostCSS&lt;/a&gt;, uma ferramenta que por padrão é muito útil e que não faz “nada”…&lt;/p&gt;

&lt;p&gt;Antes de falarmos sobre PostCSS, vamos rever algumas soluções e metodologias que foram surgindo ao longo dos últimos anos e que foi moldando como escrevemos CSS atualmente.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/oh-boy.gif&quot; alt=&quot;Oh boy...&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;metodologias&quot;&gt;Metodologias&lt;/h2&gt;

&lt;p&gt;Seja ela &lt;a href=&quot;https://suitcss.github.io/&quot;&gt;SUIT CSS&lt;/a&gt;, &lt;a href=&quot;https://en.bem.info/&quot;&gt;BEM&lt;/a&gt;, &lt;a href=&quot;http://oocss.org/&quot;&gt;OOCSS&lt;/a&gt;, &lt;a href=&quot;https://smacss.com/&quot;&gt;SMACSS&lt;/a&gt;, […] entre tantas outras, todas elas possuem pontos positivos e negativos, e como falei acima, cabe a você decidir.&lt;/p&gt;

&lt;p&gt;De uma maneira geral, todas cumprem o que prometem, se fosse para escolher uma eu optaria pelo SUIT CSS que tem nas suas raízes o BEM.&lt;/p&gt;

&lt;h2 id=&quot;pré-processadores&quot;&gt;Pré-processadores&lt;/h2&gt;

&lt;p&gt;Resumindo os pré-processadores CSS: Syntax sugar e template language. Os pré-processadores tornaram a tarefa de escrever CSS muito mais fácil e ainda adicinou alguns “poderes” como loops, mixins, funções e mais um monte de coisas que raramente as pessoas usam para valer em projetos, mas que deveriam.&lt;/p&gt;

&lt;h2 id=&quot;postcss&quot;&gt;PostCSS&lt;/h2&gt;

&lt;p&gt;Ok, ao ponto principal do post, PostCSS.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/go-on.gif&quot; alt=&quot;Inside PostCSS&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;PostCSS nada mais é do que uma ferramenta que nos permite transformar CSS usando JS.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Conforme relatei acima, PostCSS por padrão é muito útil, porém não faz nada, pois o responsável pela transformação são os plugins e, como você pode imaginar, &lt;a href=&quot;http://postcss.parts/&quot;&gt;temos muitos plugins para os mais variados tipos de tarefas&lt;/a&gt;, existe até &lt;a href=&quot;https://github.com/postcss/postcss-use&quot;&gt;plugin para resolver problemas com plugins&lt;/a&gt;. 🤔&lt;/p&gt;

&lt;p&gt;Basicamente uma chamada PostCSS é composta pelo Parser e pelo CSS Stringifier, conforme imagem abaixo:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/inside-postcss.png&quot; alt=&quot;Inside PostCSS&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Em outras palavras, o Parser recebe uma string de CSS e transforma esta string em uma AST (Abstract Syntax Tree), enquanto que o CSS Stringifier faz justamente o contrário, ele transforma a AST (já modificada pelos plugins) em uma string CSS.&lt;/p&gt;

&lt;p&gt;Deu pra perceber o quão poderoso isto é? Podemos fazer basicamente qualquer coisa com o CSS manipulando-o usando JS.&lt;/p&gt;

&lt;p&gt;Mesmo com todo este poder, PostCSS é rápido, muito rápido! Veja o benchmark abaixo:&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;/* Results on node 5.0.0, Fedora 22, Intel 5Y70, 8 GB RAM and SSD::
PostCSS:   40 ms
Rework:    75 ms   (1.9 times slower)
libsass:   76 ms   (1.9 times slower)
Less:      147 ms  (3.7 times slower)
Stylus:    166 ms  (4.1 times slower)
Stylecow:  258 ms  (6.4 times slower)
Ruby Sass: 1042 ms (26.0 times slower)
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Entretando, podemos notar que com exceção da versão em Ruby do compilador do Sass, todas as demais são rápidas o suficiente. O benchmark completo pode ser visto &lt;a href=&quot;https://github.com/postcss/benchmark&quot;&gt;aqui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Como este post é apenas um breve resumo, não vou entrar em detalhes de configurações, isto fica para o próximo post que será sobre &lt;strong&gt;CSS Modules e ReactJS&lt;/strong&gt;, mas apenas adiantando um pouco o assunto…&lt;/p&gt;

&lt;h2 id=&quot;cssnext&quot;&gt;cssnext&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Não, não teremos CSS4 (assim como não temos CSS3, e sim CSS com seletores level 3).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;cssnext nos permite usar novas features do CSS (ex.: variáveis) hoje, ou seja, é como o Babel, só que “do css…”&lt;/p&gt;

&lt;p&gt;Considere:&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;--itemColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#08C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;ol&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;--itemColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#655&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;/* Adivinha o que acontece?! */&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;--itemColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;No exemplo acima, declaramos uma variável nativa do CSS e atribuímos 2 valores diferentes em 2 escopos diferentes; &lt;code class=&quot;highlighter-rouge&quot;&gt;ul&lt;/code&gt; e &lt;code class=&quot;highlighter-rouge&quot;&gt;ol&lt;/code&gt;. Todo &lt;code class=&quot;highlighter-rouge&quot;&gt;li&lt;/code&gt; que estiver no escopo do &lt;code class=&quot;highlighter-rouge&quot;&gt;ul&lt;/code&gt; terá uma cor azul e aqueles que estiverem no escopo do &lt;code class=&quot;highlighter-rouge&quot;&gt;ol&lt;/code&gt; terão uma cor marrom. Bacana, não?&lt;/p&gt;

&lt;p&gt;Apesar da sintaxe feia, variáveis nativas no CSS vão muito além do que atribuição de valores, se quiser saber mais recomendo ler &lt;a href=&quot;https://diessi.ca/blog/a-cascata-das-variaveis-do-css/&quot;&gt;este post escrito pela Diéssica&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Demais features do cssnext =&amp;gt; &lt;a href=&quot;http://cssnext.io/features/&quot;&gt;http://cssnext.io/features/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/not-bad.gif&quot; alt=&quot;Not bad&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;css-modules&quot;&gt;CSS Modules&lt;/h2&gt;

&lt;p&gt;CSS Modules surgiu da necessidade de algum mecanismo de escopo no CSS.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://www.w3.org/TR/css-scoping-1/&quot;&gt;Existe um draft sobre escopo nativo, porém ainda não passa de draft&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Com CSS Modules, tudo tem seu próprio escopo, ou seja local, dito isto não precisamos nos preocupar com nomes &amp;amp; prefixos de classes &amp;amp; conflitos.&lt;/p&gt;

&lt;p&gt;Considere os seguintes componente &lt;strong&gt;Foo&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Foo.js&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;styles&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./foo.css'&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;styles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;/* Foo.css */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.title&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#666&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Mesmo usando uma classe com nome tão comum como &lt;code class=&quot;highlighter-rouge&quot;&gt;title&lt;/code&gt; não terei problemas de conflitos pois quando compilado, meu componente vai ter uma classe “escopada” com uma hash, algo do tipo:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;_6kldcs&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Foo&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/img/clap-kim.gif&quot; alt=&quot;Not bad&quot; /&gt;&lt;/p&gt;

&lt;p&gt;E caso eu tivesse um componente &lt;strong&gt;Bar&lt;/strong&gt; com a mesma estrutura e mesmo nome de classe, a hash seria diferente.&lt;/p&gt;

&lt;p&gt;No próximo post explicarei em detalhes como funciona o escopo local e global no CSS Modules.&lt;/p&gt;

&lt;h3 id=&quot;continua-no-próximo-episódio&quot;&gt;Continua no próximo episódio.&lt;/h3&gt;
</description>
        <pubDate>Sat, 25 Jun 2016 06:17:58 -0300</pubDate>
        <link>https://lucas.ninja/blog/2016/06/25/css-is-dead-long-live-css/</link>
        <guid isPermaLink="true">https://lucas.ninja/blog/2016/06/25/css-is-dead-long-live-css/</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>ReactEurope 2016 - Parte 2</title>
        <description>&lt;p&gt;Dando continuidade a &lt;a href=&quot;https://lucas.ninja/blog/2016/06/07/react-europe-2016-parte-1.html&quot;&gt;parte 1&lt;/a&gt;, vamos a parte 2 do evento, ou melhor, o dia 2 (que na verdade foi o dia 03 de Junho…). E para evitar a fadiga, pegue uma caneca de café (ou chá… ou água, whatever!).&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Melhor caneca…&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/img/react-europe-mug-1.JPG&quot; alt=&quot;Mug&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Ever!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/img/react-europe-mug-2.JPG&quot; alt=&quot;Mug&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2º-dia-03062016&quot;&gt;2º dia (03/06/2016)&lt;/h2&gt;

&lt;p&gt;Depois de um primeiro dia bem agitado por conta do check-in/credenciamento e entrega dos brindes, o segundo dia foi bem mais tranquilo…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/react-europe-over.JPG&quot; alt=&quot;Empty place...&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;PS.: A foto acima foi antes do evento começar. :)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;evolving-the-visual-programming-environment-with-react&quot;&gt;Evolving the Visual Programming Environment with React&lt;/h3&gt;

&lt;p&gt;Nesta palestra, &lt;a href=&quot;https://twitter.com/jonasgebhardt&quot;&gt;Jonas Gebhardt&lt;/a&gt; demonstra através de uma ferramenta de prototipagem bem legal como podemos tornar o ambiente de programação mais acessivo.&lt;/p&gt;

&lt;div class=&quot;u-video&quot;&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/WjJdaDXN5Vs&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h3 id=&quot;react-native-retrospective&quot;&gt;React Native Retrospective&lt;/h3&gt;

&lt;p&gt;Este ano (2016) React Native completou 1 ano de vida e &lt;a href=&quot;https://twitter.com/brindelle&quot;&gt;Bonnie Eisenman&lt;/a&gt; apresenta uma retrospectiva do mesmo. Polêmico desde o seu anúncio e lançamento em 2015, onde na época em questão tinha suporte apenas para iOS, passando até os dias atuais onde conta com suporte para Android e o que o futuro nos reserva com o recente anúncio da parceria com a Microsoft e Samsung para fazer uso do RN em seus respectivos devices e plataformas.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/react-europe-bonnie-eisenman.JPG&quot; alt=&quot;Bonnie Eisenman&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;u-video&quot;&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/-vl57brMWNg&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h3 id=&quot;the-evolution-of-react-ui-development&quot;&gt;The Evolution of React UI Development&lt;/h3&gt;

&lt;p&gt;Uma das palestras mais animadas do dia, &lt;a href=&quot;https://twitter.com/mxstbr&quot;&gt;Max Stoiber&lt;/a&gt; e &lt;a href=&quot;https://twitter.com/nikgraf&quot;&gt;Nik Graf&lt;/a&gt; fazem um review sobre o desenvolvimento de UI com React e apresentam seu mais novo projeto; &lt;a href=&quot;https://github.com/carteb/carte-blanche&quot;&gt;Carte Blanche&lt;/a&gt;, que nada mais é que um espaço isolado de desenvolvimento que permite você desenvolver e testar componentes de uma maneira bem interessante. Vale a pena conferir!&lt;/p&gt;

&lt;div class=&quot;u-video&quot;&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/0IkWuXeKPV0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h3 id=&quot;recomposing-your-react-application&quot;&gt;Recomposing your React application&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/acdlite&quot;&gt;Andrew Clark&lt;/a&gt; discute diversas estratégias de como construir aplicações React preparadas para escalabilidade e reuso. Dica: &lt;a href=&quot;https://github.com/acdlite/recompose&quot;&gt;Recompose&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;u-video&quot;&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/zD_judE-bXk&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h3 id=&quot;falcor-one-model-everywhere&quot;&gt;Falcor: One Model Everywhere&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/jhusain&quot;&gt;Jafar Husain&lt;/a&gt; apresenta e detalha de uma maneira muito clara e objetiva &lt;a href=&quot;http://netflix.github.io/falcor/&quot;&gt;Falcor&lt;/a&gt;, criado pelo Netflix. Nesta palestra ele compara o Falcor com o GraphQL explicando suas principais diferenças e quando usar qual.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/react-europe-falcor.png&quot; alt=&quot;Falcor&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;u-video&quot;&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/nxQweyTUj5s&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h3 id=&quot;javascript-react-native-and-performance&quot;&gt;JavaScript, React Native and Performance&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/tadeuzagallo&quot;&gt;Tadeu Zagallo&lt;/a&gt; e toda a equipe que trabalha no React Native têm buscado constantemente melhorar sua performance, tanto que existe uma equipe trabalhando apenas em otimizações. Nesta palestra ele explica o que têm sendo feito, desde forks no JSCore para adicionar otimizações específicas até otimizações nativas, como por exemplo, usufruir do multi-thread na inicialização das aplicações que fazem uso do React Native.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/react-europe-tadeu-zagallo.JPG&quot; alt=&quot;Tadeu Zagallo&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;u-video&quot;&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/1oL_OJ3UePU&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h3 id=&quot;building-list-for-android-with-exponent-and-react-native&quot;&gt;Building li.st for Android with Exponent and React Native&lt;/h3&gt;

&lt;p&gt;Membro do core team do React Native, &lt;a href=&quot;https://twitter.com/notbrent&quot;&gt;Brent Vatne&lt;/a&gt; conta sua experiência de como foi desenvolver uma aplicação de grande porte para Android usando React Native; &lt;a href=&quot;https://li.st/&quot;&gt;li.st&lt;/a&gt;. Muitas dicas valiosas!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/react-europe-brent-vatne.JPG&quot; alt=&quot;Brent Vatne&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;u-video&quot;&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/cI9bDvDEsYE&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h3 id=&quot;graphql-future&quot;&gt;GraphQL Future&lt;/h3&gt;

&lt;p&gt;O que esperar do GraphQL? Quais são os planos dos mantedores do projeto? Como o Facebook está usando o GraphQL? Estas e outras perguntas são respondidas por &lt;a href=&quot;https://twitter.com/laneykuenzel&quot;&gt;Laney Kuenzel&lt;/a&gt; e &lt;a href=&quot;https://twitter.com/leeb&quot;&gt;Lee Byron&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;u-video&quot;&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/ViXL0YQnioU&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h3 id=&quot;building-native-mobile-apps-with-graphql&quot;&gt;Building native mobile apps with GraphQL&lt;/h3&gt;

&lt;p&gt;Muitas, mas muitas vezes mesmo o GraphQL é confundido como uma biblioteca para ser usada apenas com React. O que não é verdade. &lt;a href=&quot;https://twitter.com/martijnwalraven&quot;&gt;Martijn Walraven&lt;/a&gt; demonstra como usar GraphQL num app Swift.&lt;/p&gt;

&lt;div class=&quot;u-video&quot;&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/z5rz3saDPJ8&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h3 id=&quot;qa-with-core-team-members&quot;&gt;Q&amp;amp;A with core team members&lt;/h3&gt;

&lt;p&gt;Uma longa sessão de perguntas e respostas. :)&lt;/p&gt;

&lt;div class=&quot;u-video&quot;&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/5pMDd1t2thc&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;E assim acabou mais um ReactEurope, de longe o melhor evento de tecnologia que participei, muito networking, muitas amizades novas e muito conhecimento adquirido!&lt;/p&gt;

&lt;p&gt;Agradeço a parceria de todo o pessoal do staff e em especial para o &lt;a href=&quot;https://twitter.com/patcito&quot;&gt;Patrick&lt;/a&gt; e para a &lt;a href=&quot;https://twitter.com/katy_gca&quot;&gt;Katy&lt;/a&gt; pela oportunidade de poder ajudar e participar de um evento sensacional como este. Obrigado!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/react-europe-me.jpg&quot; alt=&quot;Game over&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 08 Jun 2016 17:17:58 -0300</pubDate>
        <link>https://lucas.ninja/blog/2016/06/08/react-europe-2016-parte-2/</link>
        <guid isPermaLink="true">https://lucas.ninja/blog/2016/06/08/react-europe-2016-parte-2/</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>ReactEurope 2016 - Parte 1</title>
        <description>&lt;p&gt;2016, segunda edição do ReactEurope, novamente em Paris tal qual foi em 2015. Neste ano, tive a oportunidade de poder participar do evento (de perto) e ajudar na organização como voluntário. Foi uma experiência incrível (talvez farei um post sobre) e, mesmo não sendo possível acompanhar todas as palestras, posso dizer que o evento foi acima da média!&lt;/p&gt;

&lt;p&gt;Como o próprio nome diz, é um evento focado em React, porém não! Tivemos uma variação legal de palestras, não ficando preso apenas ao React e ao React Native. Teve GraphQL, Flow, Falcor, Elm, entre outros!&lt;/p&gt;

&lt;p&gt;Pouco mais de &lt;strong&gt;800 pessoas&lt;/strong&gt; estiveram presentes nos dois dias de evento, fora os dois dias de Workshop e também o Hackathon que aconteceu no dia 01/06/2016 na sede da Mozilla em Paris.&lt;/p&gt;

&lt;p&gt;Vamos lá?!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Acatando a sugestão de um amigo, resolvi dividir o artigo em duas partes, esta é a primeira parte. Assim que a segunda parte estiver publicada, irei atualizar com o link aqui.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Update: Parte 2 aqui =&amp;gt; &lt;a href=&quot;https://lucas.ninja/blog/2016/06/08/react-europe-2016-parte-2.html&quot;&gt;https://lucas.ninja/blog/2016/06/08/react-europe-2016-parte-2.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/img/react-europe-entrance.JPG&quot; alt=&quot;Entrance&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2º-dia-do-workshop-01062016&quot;&gt;2º dia do Workshop (01/06/2016)&lt;/h2&gt;

&lt;p&gt;Tive a oportunidade de acompanhar o 2º dia do Workshop sobre React + Redux. Dan Abramov e &lt;a href=&quot;https://twitter.com/acdlite&quot;&gt;Andrew Clark&lt;/a&gt; guiaram aproximadamente 80 alunos no desenvolvimento de uma aplicação React + Redux. O Workshop foi bem completo, cobrindo vários tópicos importantes, tais como performance, testes, além de muitas dicas sobre ES2015/ES6.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/react-europe-workshop.JPG&quot; alt=&quot;Workshop&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ao final do Workshop (e do Hackathon que estava acontecendo na sede da Mozilla em Paris) todos foram convidados para um happy hour no já conhecido “React Bar”, mais precisamente no The Frog, próximo ao local do evento e Workshop. O happy hour fora patrocinado pela &lt;a href=&quot;https://red-badger.com/&quot;&gt;Red Badger&lt;/a&gt;, era só chegar lá, apresentar o ticket e aproveitar drinks de graça!&lt;/p&gt;

&lt;h2 id=&quot;1º-dia-02062016&quot;&gt;1º dia (02/06/2016)&lt;/h2&gt;

&lt;p&gt;O primeiro dia do evento começou bem cedo, também pudera, mais de 800 pessoas para fazer check-in e entregar os brindes. Felizmente tudo correu bem, excelente trabalho em equipe de todo o pessoal que estava ajudando a organizar o evento. :)&lt;/p&gt;

&lt;p&gt;Como todas as palestras foram gravadas, eu não vou entrar em detalhes, apenas um breve resumo e o video para acompanhar.&lt;/p&gt;

&lt;h3 id=&quot;the-redux-journey&quot;&gt;The Redux Journey&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/gaearon&quot;&gt;Dan Abramov&lt;/a&gt;, criador do (até 1 ano atrás desconhecido) Redux, conta como tem sido a jornada do Redux até agora, toda a sua evolução, os aprendizados no meio do caminho e como a comunidade tem ajudado a cultivar o ecosistema.&lt;/p&gt;

&lt;div class=&quot;u-video&quot;&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/uvAXVMwHJXU&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h3 id=&quot;native-navigation-for-every-platform&quot;&gt;Native Navigation for Every Platform&lt;/h3&gt;

&lt;p&gt;Nesta palestra, &lt;a href=&quot;https://twitter.com/ericvicenti&quot;&gt;Eric Vlad&lt;/a&gt;, que trabalhou no primeiro app powered by React Native em produção; Facebook Groups demonstra como a nova API de navegação para o React Native (atualmente apelidada de Navigation Experimental) funciona e como ela pode ser usada até mesmo para web!&lt;/p&gt;

&lt;div class=&quot;u-video&quot;&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/dOSwHABLvdM&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h3 id=&quot;a-cartoon-guide-to-performance-in-react&quot;&gt;A cartoon guide to performance in React&lt;/h3&gt;

&lt;p&gt;Uma das palestras que estava mais aguardando para ver e a &lt;a href=&quot;https://twitter.com/linclark&quot;&gt;Lin Clark&lt;/a&gt; não me decepcionou! Sou um grande fã dela, principalmente pelo seu projeto &lt;a href=&quot;https://code-cartoons.com/&quot;&gt;Code Cartoons&lt;/a&gt; e nesta palestra ela deu dicas bem bacanas sobre como melhorar a performance da sua aplicação React. Bacana também foi saber sobre o projeto novo da Mozilla, o &lt;a href=&quot;http://mozilla.github.io/tofino/&quot;&gt;Project Tofino&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/react-europe-lin-clark.JPG&quot; alt=&quot;Link Clark&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;u-video&quot;&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/-t8eOoRsJ7M&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h3 id=&quot;react-native-3-60fps--improving-react-native-animations&quot;&gt;React Native &amp;lt;3 60FPS – Improving React Native animations&lt;/h3&gt;

&lt;p&gt;Atualmente as animações estão cada vez mais presentes nas aplicações, nesta palestra, &lt;a href=&quot;https://twitter.com/kzzzf&quot;&gt;Krzysztof Magiera&lt;/a&gt; mostra várias dicas de como manter as animações no React Native sempre em 60FPS!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/react-europe-krzysztof-magiera.JPG&quot; alt=&quot;Krzysztof Magiera&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;u-video&quot;&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/qgSMjYWqBk4&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h3 id=&quot;being-successful-at-open-source&quot;&gt;Being Successful at Open Source&lt;/h3&gt;

&lt;p&gt;O Facebook tem se mostrado um grande celeiro open source com vários projetos de sucesso. &lt;a href=&quot;https://twitter.com/Vjeux&quot;&gt;Christopher Chedeau (aka.: Vjeux)&lt;/a&gt; conta sua experiência em diversos projetos open source pelos quais ele já trabalhou e dá dicas valiosas de como manter um projeto open source.&lt;/p&gt;

&lt;div class=&quot;u-video&quot;&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/nRF0OVQL9Nw&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h3 id=&quot;graphql-at-facebook&quot;&gt;GraphQL at Facebook&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/dlschafer&quot;&gt;Dan Schafer&lt;/a&gt;, co-criador do GraphQL explica em detalhes como o projeto têm sido usado em produção no Facebook ao longo dos anos.&lt;/p&gt;

&lt;div class=&quot;u-video&quot;&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/etax3aEe2dA&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h3 id=&quot;a-deepdive-into-flow&quot;&gt;A Deepdive Into Flow&lt;/h3&gt;

&lt;p&gt;Flow é um “verificador” de tipagem, criado para rapidamente encontrar erros em aplicações JS. Como o próprio nome da palestra sugere, &lt;a href=&quot;https://twitter.com/lbljeffmo&quot;&gt;Jeff Morrison&lt;/a&gt; nos apresenta um grande overview de como o Flow realmente funciona e qual a sua importância nos dias atuais.&lt;/p&gt;

&lt;div class=&quot;u-video&quot;&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/VEaDsKyDxkY&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h3 id=&quot;debugging-flux-applications-in-production&quot;&gt;Debugging flux applications in production&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/mdiordiev&quot;&gt;Mihail Diordiev&lt;/a&gt; é o criador do &lt;a href=&quot;https://github.com/zalmoxisus/redux-devtools-extension&quot;&gt;Redux DevTools&lt;/a&gt; e nesta palestra ele explica como tornar o processo de debug muito mais fácil, vale muito a pena conferir!&lt;/p&gt;

&lt;div class=&quot;u-video&quot;&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/cbXLohVbzNI&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h3 id=&quot;on-the-spectrum-of-abstraction&quot;&gt;On the Spectrum of Abstraction&lt;/h3&gt;

&lt;p&gt;Infelizmente não pude acompanhar a palestra do &lt;a href=&quot;https://twitter.com/_chenglou&quot;&gt;Cheng Lou&lt;/a&gt;, ainda bem que todas as palestras foram filmadas! Nesta palestra Cheng aborda diversos paradigmas usados pelas comunidades de desenvolvimento em geral.&lt;/p&gt;

&lt;div class=&quot;u-video&quot;&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/mVVNJKv9esE&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h3 id=&quot;react-redux-analytics&quot;&gt;React Redux Analytics&lt;/h3&gt;

&lt;p&gt;Nesta palestra, &lt;a href=&quot;https://twitter.com/codenarian&quot;&gt;Bertrand Karerangabo&lt;/a&gt; e &lt;a href=&quot;https://twitter.com/e_p82&quot;&gt;Evan Schultz&lt;/a&gt; abordam como usaram Redux middleware para analisar diversas métricas de uma aplicação React.&lt;/p&gt;

&lt;div class=&quot;u-video&quot;&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/MBTgiMLujek&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h3 id=&quot;lightning-talks&quot;&gt;Lightning talks&lt;/h3&gt;

&lt;p&gt;Ao final do primeiro dia (e do segundo), tivemos também várias Lightning talks, que como o próprio nome sugere, são palestras bem rápidas e objetivas. Destaco a palestra do criador do &lt;a href=&quot;https://babeljs.io/&quot;&gt;Babel&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/sebmck&quot;&gt;Sebastian McKenzie&lt;/a&gt; onde ele mostra seu mais novo experimento, uma ferramenta capaz de tornar a inicialização de aplicações JS até 3 vezes mais rápido! Infelizmente Sebastian não garantiu quando e se vai tornar este experimento open source…&lt;/p&gt;

&lt;div class=&quot;u-video&quot;&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/xbZzahWakGs&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;E assim acabou o primeiro dia! Aguardem a continuação.&lt;/p&gt;
</description>
        <pubDate>Tue, 07 Jun 2016 17:17:58 -0300</pubDate>
        <link>https://lucas.ninja/blog/2016/06/07/react-europe-2016-parte-1/</link>
        <guid isPermaLink="true">https://lucas.ninja/blog/2016/06/07/react-europe-2016-parte-1/</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Brave New World again</title>
        <description>&lt;p&gt;Howdy people from Internet!&lt;/p&gt;

&lt;p&gt;Yep, I’m back once again to this blog-ish thing!&lt;/p&gt;
</description>
        <pubDate>Sun, 15 May 2016 15:37:58 -0300</pubDate>
        <link>https://lucas.ninja/blog/2016/05/15/brave-new-world-again/</link>
        <guid isPermaLink="true">https://lucas.ninja/blog/2016/05/15/brave-new-world-again/</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>BrazilJS Conf 2015 — eu fui!</title>
        <description>&lt;p&gt;Já se passou mais de uma semana do maior evento de JS desse universo (ouvi dizer que há outro universo em que há outro evento de JS ainda maior), chega a hora de escrever (ou acabar de escrever?) um post sobre o mesmo.&lt;/p&gt;

&lt;p&gt;Ano passado (2014), quase fui, este ano (2015), quase não fui, sim, confesso que estava pensativo se realmente valeria a pena todo o esforço com tantas coisas acontecendo ao mesmo tempo.&lt;/p&gt;

&lt;p&gt;Quer saber se valeu a pena?&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://medium.com/@agtlucas/braziljs-conf-2015-eu-fui-dbae6a26c813#.cfme5pwhr&quot;&gt;Continue lendo aqui!&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Sun, 06 Sep 2015 06:57:58 -0300</pubDate>
        <link>https://lucas.ninja/blog/2015/09/06/brazil-js-conf-2015-eu-fui/</link>
        <guid isPermaLink="true">https://lucas.ninja/blog/2015/09/06/brazil-js-conf-2015-eu-fui/</guid>
        
        
        <category>blog</category>
        
      </item>
    
  </channel>
</rss>
